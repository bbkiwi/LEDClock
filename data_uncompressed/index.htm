<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>LED Control</title>
    <link href='main.css' rel='stylesheet' type='text/css'>
	  <link rel="stylesheet" href="dist/simplepicker.css">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="144x144"  href="/favicon-144x144.png">
    <link rel="icon" type="image/png" sizes="48x48" href="/favicon.ico">
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#00878f">
    <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport'>
    <script src="WebSocket.js" type="text/javascript"></script>

	<style>
	        #function-points {
            width: 300px;
            height: 300px;
            border: 1px solid #000;
            position: relative;
        }

        .point {
            width: 10px; /* must save half width in pt_half+width in script section */
            height: 10px;
            background-color: red;
            border-radius: 50%;
            position: absolute;
        }

        .point-marker {
            width: 10px;
            height: 10px;
            background-color: black;
            position: absolute;
            transform: translate(-50%, -50%);
            border-radius: 50%;
        }
        .point-small {
            width: 2px;
            height: 2px;
            background-color: black;
            position: absolute;
            transform: translate(-50%, -50%);
            border-radius: 50%;
        }
	  body { font-family: 'Roboto'; }
		.event-log {
		  font-family: consolas, Monaco, monospace;
		  margin: 10px 5px;
		  line-height: 1;
		  border: 1px solid #4c4c4c;
		  height: auto;
		  width: 90%;
		  padding: 2px 6px;
		  color: #4c4c4c;
		  white-space: pre;
		}
        .btn-group button {
            background-color: #04AA6D; /* Green background */
            border: 1px solid green; /* Green border */
            color: white; /* White text */
            padding: 10px 24px; /* Some padding */
            cursor: pointer; /* Pointer/hand icon */
            float: center; /* Float the buttons side by side */
        }

        /* Clear floats (clearfix hack) */
        .btn-group:after {
          content: "";
          clear: both;
          display: table;
        }

        .btn-group button:not(:last-child) {
          border-right: none; /* Prevent double borders */
        }

        /* Add a background color on hover */
        .btn-group button:hover {
          background-color: #3e8e41;
        }
  </style>
</head>

<body>
<button onclick="toggleShowHide('Clock-Control')">Clock Control</button>
<button onclick="toggleShowHide('Display-Control')">Display Control</button>
<button onclick="toggleShowHide('Alarm-Control')">Alarm Control</button>
<button onclick="toggleShowHide('Alarm-Control2')">Alarm Control2</button>
<div id="Clock-Control" style="display: none;">
    <center>
        <header>
            <h1>Clock Control</h1>
        </header>
        <div>
             <p style="margin:8px 0px"><button id="whattime" class="button" style="background-color:#999" onclick="whattimeAnswer();">What time?</button></p>
             <p style="margin:8px 0px"><button id="animation" class="button" style="background-color:#999" onclick="lightEffect();">Light FX</button></p>
             <input type="text" size = "3" disabled value='W/F'>
             <input type="text" size = "3" disabled value='W/S'>
             <input type="text" size = "3" disabled value='1stH'>
             <input type="text" size = "3" disabled value='Ncf2'>
             <input type="text" size = "3" disabled value='Ncf1'>
             <input type="text" size = "3" disabled value='Ncf0'>
             <input type="text" size = "3" disabled value='fps'>
             <input type="text" size = "3" disabled value='ani#'>
             <input type="text" size = "3" disabled value='ebd#'>
             <input type="text" size = "3" disabled value='dura'><br>
             <input type="text" size = "3" id="pcntwheelpersec" value=0>
             <input type="text" size = "3" id="pcntwheelperstrip" value=0>
             <input type="text" size = "3" id="firstcolor" value=0>
             <input type="text" size = "3" id="nodec2" value=0>
             <input type="text" size = "3" id="nodec1" value=0>
             <input type="text" size = "3" id="nodec0" value=0>
             <input type="text" size = "3" id="framerate" value=0>
             <input type="text" size = "3" id="lightalarmnum" value=0>
             <input type="text" size = "3" id="lightalarmex" value=0>
             <input type="text" size = "3" id="duration" value=10>

            <div id="function-points"></div>
<div>
<button type="button" onclick=
"generateFunction()">Generate Function</button>
<button type="button" onclick=
"clearPoints()">Clear Points</button>
<button type="button" onclick=
"addPointHelper(0,0)">Add (0,0)</button>
<button type="button" onclick=
"addPointHelper(300,300)">Add (300,300)</button>
</div>
<div id="function-output">
<!-- The generated piecewise linear function will be displayed here --></div>



             <p style="margin:8px 0px"><button id="melody" class="button" style="background-color:#999" onclick="melodyEffect();">Tune</button></p>
             <p style="margin:8px 0px"><button id="sunset" class="button" style="background-color:#999" onclick="calcSunsets();">Calc Sunsets</button></p>
             <p style="margin:8px 0px"><button id="requestsaveconfig" class="button" style="background-color:#999" onclick="requestSaveConfig();">Save Config</button></p>
       </div>
    </center>
</div>
<div id="Display-Control" style="display: none;">
    <center>
        <header>
            <h1>Display Control</h1>
        </header>
        <div>
            <table>
                <tr>
                    <td style="width:14.4px; text-align: right">R: </td>
                    <td><input class="enabled" id="r" type="range" min="0" max="1023" step="1" onmouseup="sendRGB();" ontouchend="sendRGB();" value="0"></td>
                </tr>
                <tr>
                    <td style="width:14.4px; text-align: right">G: </td>
                    <td><input class="enabled" id="g" type="range" min="0" max="1023" step="1" onmouseup="sendRGB();" ontouchend="sendRGB();"  value="0"></td>
                </tr>
                <tr>
                    <td style="width:14.4px; text-align: right">B: </td>
                    <td><input class="enabled" id="b" type="range" min="0" max="1023" step="1" onmouseup="sendRGB();" ontouchend="sendRGB();"  value="0"></td>
                </tr>
            </table>
       </div>


       <div class="btn-group">
             <button id="setbackground" class="button"  onclick="setbackground();">Back</button>
             <button id="set12" class="button"  onclick="set12();">12</button>
             <button id="setquarter" class="button"  onclick="setquarter();">Quad</button>
             <button id="setdivision" class="button"  onclick="setdivision();">Div</button>
       </div>
       <div>
            <table>
                <tr>
                    <td style="width:14.4px; text-align: right"><button id="sethour" class="button"  onclick="sethour();">Hour</button> </td>
                     <td style="width:14.4px; text-align: right"> <button id="setminute" class="button"  onclick="setminute();">Min</button></td>
                     <td style="width:14.4px; text-align: right"> <button id="setsecond" class="button"  onclick="setsecond();">Sec</button></td>
                     <td style="width:14.4px; text-align: right"> <button id="setdispind" class="button"  onclick="setdispind();">Disp#</button></td>
                </tr>
                <tr>
                    <td style="width:14.4px; text-align: right">
                      <select id="widthhour">
                        <option value="0">0</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                      </select></td>
                     <td style="width:14.4px; text-align: right">
                       <select id="widthminute">
                        <option value="-1">Hide</option>
                        <option value="0">0</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                      </select> </td>
                     <td style="width:14.4px; text-align: right">
                        <select id="widthsecond">
                        <option value="-1">Hide</option>
                        <option value="0">0</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        </select>
                     </td>
                     <td style="width:14.4px; text-align: right">
                        <select id="dispind">
                        <option value="0">0</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">night</option>
                        </select>
                     </td>
                 </tr>
                 <tr>
                    <td style="width:14.4px; text-align: right"> </td>
                    <td style="width:14.4px; text-align: right"><input id="blinkminute" type="checkbox" checked="true">blink </td>
                    <td style="width:14.4px; text-align: right"> </td>
                    <td style="width:14.4px; text-align: right"> </td>
                </tr>
            </table>
       </div>
    </center>
</div>

<div id="Alarm-Control" style="display: none;">
    <center>
        <header>
            <h1>Alarm Control</h1>
        </header>
        <div>
          <button class="simplepicker-btn">Choose Date and Time</button>
          <p style="margin:8px 0px"><button id="saveddatetime" class="button" style="background-color:#999">Save Date Time</button></p>
          <p style="margin:8px 0px"><button id="type" class="button" style="background-color:#999" onclick="savetype();">Type</button>
          <input type="text" id="alarmtype" value=1></p>
             <p style="margin:8px 0px"><button id="repeat" class="button" style="background-color:#999" onclick="saverepeat();">Repeat</button>
             <input type="text" id="alarmrepeat" value=86400></p>
             <p style="margin:8px 0px"><button id="duration" class="button" style="background-color:#999" onclick="saveduration();">Duration</button>
             <input type="text" id="alarmduration" value=10000></p>
             <p style="margin:8px 0px"><button id="setalarm" class="button" style="background-color:#999" onclick="setalarm();">Set Alarm</button>
             <input type="text" id="alarmnum" value=1></p>
        </div>
    </center>
</div>

<div id="Alarm-Control2" style="display: none;">
    <center>
        <header>
            <h1>Alarm Control 2</h1>
        </header>
        <div>
          <table>
            <tr>
              <td>
                <button class="simplepicker-btnx">Picker</button>
              </td>
            </tr>

            <tr>
              <td>
                <button id="saveddatetime1" class="button" style="background-color:#999">When</button>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
            </tr>

            <tr>
              <td>
          <button id="type1" class="button" style="background-color:#999" onclick="savetype();">Type</button>
          </td>
                       <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>

          </tr>

          <tr>
            <td>
            <button id="repeat1" class="button" style="background-color:#999" onclick="saverepeat();">Repeat</button>
            </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>

             </tr>

             <tr>
            <td>
            <button id="duration1" class="button" style="background-color:#999" onclick="saverepeat();">Duration</button>
            </td>
              <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>
             <td>
                <input style="width:50px" type="text" id="x" value=0>
             </td>

             </tr>
          </table>
        </div>
    </center>
</div>

  <div class="picker-area">
  <h2>Event logs:</h2>
  <div class="event-log"></div>
  <script src="dist/simplepicker.js"></script>
  <script>

        const pt_half_width = 5; // must take from css above
        let points = [];
        const functionPlot = document.getElementById("function-points");
        const plot_ht = 300; //functionPlot.clientHeight;
        console.log('plot_ht = ', plot_ht, functionPlot);
        // will use to adjust so math coor origin is bottom left, not top left
        // Function to add a point centered at the mouse cursor
        function addPoint(event) {
            const x = event.clientX - event.target.getBoundingClientRect().left;
            const y = event.clientY - event.target.getBoundingClientRect().top ;
            addPointHelper(Math.round(x), Math.round(plot_ht - y))
            }

        function addPointHelper(x,y) {
            const point = document.createElement('div');
            point.id = 'point';
            point.className = 'point';
            point.style.left = x - pt_half_width + 'px';
            point.style.top = plot_ht - y - pt_half_width  + 'px';
            points.push({x:x,y:y});
            updatePlot();
            // Double-click event listener to remove the point
            point.addEventListener('dblclick', () => {
               console.log(+point.style.left.slice(0,-2)+pt_half_width, plot_ht - point.style.top.slice(0,-2) - pt_half_width , 'point removed')
               let pt_obj = {x:+point.style.left.slice(0,-2)+pt_half_width, y:plot_ht - point.style.top.slice(0,-2) - pt_half_width}
               let ind_to_remove = points.findIndex((el) => el.x == pt_obj.x && el.y == pt_obj.y);
               points.splice(ind_to_remove,1);
               point.remove();
               console.log('points ', points)
               updatePlot();
            });

            document.getElementById('function-points').appendChild(point);
            console.log('Added point at x = ',x, ' y = ', y, 'points ', points)
        }

        // Event listener to add a point when the mouse is clicked within the function-points
        document.getElementById('function-points').addEventListener('click', (e) => {
            if (e.target.id === 'function-points') {
                addPoint(e);
            }
        });

        // Prevent the default context menu on right-click to allow for drawing
        document.getElementById('function-points').addEventListener('contextmenu', (e) => {
            e.preventDefault();
        });


      function generateFunction() {
        const xInputs = document.querySelectorAll(".x-value");
        // Sort points by x-coordinate
        points.sort((a, b) => a.x - b.x);
        // Generate the piecewise linear function
        const piecewiseLinearFunction = (inputX) => {
            if (points.length == 0) {return null}
            if (inputX < points[0].x) {
                return points[0].y;
            }
            for (let i = 0; i < points.length - 1; i++) {
                if (inputX >= points[i].x && inputX < points[i + 1].x) {
                    const slope = (points[i + 1].y - points[i].y) / (points[i + 1].x - points[i].x);
                    return points[i].y + slope * (inputX - points[i].x);
                }
            }
            return points[points.length - 1].y;
            };

        // Display the generated function
            const functionOutput = document.getElementById("function-output");
            <!-- functionOutput.textContent = `Generated Function: f(x) = ${piecewiseLinearFunction}`; -->
            return piecewiseLinearFunction;
        }

        function clearPoints() {
            functionPlot.innerHTML = "";
            points = [];
        }

        function updatePlot() {
            // Update the graphical display of the input
             // Clear the previous points
            const graphpts = document.querySelectorAll('.point-small');
            graphpts.forEach(pt => { pt.remove(); });
            let piecewiseLinearFunction = generateFunction();

            for (let xx = 0; xx < 300; xx++) {
                const marker = document.createElement("div");
                marker.className = "point-small";
                marker.style.left = xx +'px';
                marker.style.top = plot_ht - piecewiseLinearFunction(xx)+ 'px';
                // insert markers before any plotted points so don't draw over them
                let plotted_point = document.getElementById("point");
                functionPlot.insertBefore(marker, plotted_point);
            }
        }




    let simplepicker = new SimplePicker(
	'.picker-area',
	{
      zIndex: 10,
	  compactMode: true,
	  disableTimeSection: false,
    });

    //simplepicker.open();

    const $button = document.querySelector('.simplepicker-btn');
    const $eventLog = document.querySelector('.event-log');
    $button.addEventListener('click', (e) => {
      simplepicker.open();
    });

    // $eventLog.innerHTML += '\n\n';
    simplepicker.on('submit', (date, readableDate) => {
	  //console.log(date.getDay(), date, readableDate);
      $eventLog.innerHTML = readableDate + '\n'+ $eventLog.innerHTML;
	  pickerTimeDate(date);
    });

    simplepicker.on('close', (date) => {
      $eventLog.innerHTML = 'Picker Closed'  + '\n' + $eventLog.innerHTML;
    });
  </script>
  </div>
</body>
</html>
